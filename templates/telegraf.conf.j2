{{ ansible_managed|comment }}
[global_tags]
{% if telegraf__conf__global_tags %}
{% for key, value in telegraf__conf__global_tags.iteritems() %}
  {{ key }} = "{{ value }}"
{% endfor %}
{% endif %}

# Configuration for telegraf agent
[agent]
  interval            = "{{ telegraf__conf__agent__interval }}"
  round_interval      = {{ telegraf__conf__agent__round_interval|lower }}
  metric_batch_size   = {{ telegraf__conf__agent__metric_batch_size }}
  metric_buffer_limit = {{ telegraf__conf__agent__metric_buffer_limit }}
  collection_jitter   = "{{ telegraf__conf__agent__collection_jitter }}"
  flush_interval      = "{{ telegraf__conf__agent__flush_interval }}"
  flush_jitter        = "{{ telegraf__conf__agent__flush_jitter }}"
  debug               = {{ telegraf__conf__agent__debug|lower }}
  quiet               = {{ telegraf__conf__agent__quiet|lower }}
  hostname            = "{{ telegraf__conf__agent__hostname }}"
  omit_hostname       = {{ telegraf__conf__agent__omit_hostname|lower }}

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

{% if telegraf__conf__outputs__influxdb__enabled %}
[[outputs.influxdb]]
  urls                 = [
{% for url in telegraf__conf__outputs__influxdb__urls %}
    "{{ url }}",
{% endfor %}
  ]
  database             = "{{ telegraf__conf__outputs__influxdb__database }}"
  precision            = "{{ telegraf__conf__outputs__influxdb__precision }}"
  retention_policy     = "{{ telegraf__conf__outputs__influxdb__retention_policy }}"
  write_consistency    = "{{ telegraf__conf__outputs__influxdb__write_consistency }}"
  timeout              = "{{ telegraf__conf__outputs__influxdb__timeout }}"
{% if telegraf__conf__outputs__influxdb__username %}
  username             = "{{ telegraf__conf__outputs__influxdb__username }}"
{% endif %}
{% if telegraf__conf__outputs__influxdb__password %}
  password             = "{{ telegraf__conf__outputs__influxdb__password }}"
{% endif %}
{% if telegraf__conf__outputs__influxdb__user_agent %}
  user_agent           = "{{ telegraf__conf__outputs__influxdb__user_agent }}"
{% endif %}
  udp_payload          = {{ telegraf__conf__outputs__influxdb__udp_payload }}
{% if telegraf__conf__outputs__influxdb__ssl__enabled %}
  ssl_ca               = "{{ telegraf__conf__outputs__influxdb__ssl__ssl_ca }}"
  ssl_cert             = "{{ telegraf__conf__outputs__influxdb__ssl__ssl_cert }}"
  ssl_key              = "{{ telegraf__conf__outputs__influxdb__ssl__ssl_key }}"
  insecure_skip_verify = {{ telegraf__conf__outputs__influxdb__ssl__insecure_skip_verify|lower }}
{% endif %}

{% endif %}
{% if telegraf__conf__outputs__amon__enabled %}
[[outputs.amon]]
  server_key    = "{{ telegraf__conf__outputs__amon__server_key }}"
  amon_instance = "{{ telegraf__conf__outputs__amon__amon_instance }}"
  timeout       = "{{ telegraf__conf__outputs__amon__timeout }}"

{% endif %}
{% if telegraf__conf__outputs__amqp__enabled %}
[[outputs.amqp]]
  url                  = "{{ telegraf__conf__outputs__amqp__url }}"
  exchange             = "{{ telegraf__conf__outputs__amqp__exchange }}"
  auth_method          = "{{ telegraf__conf__outputs__amqp__auth_method }}"
  routing_tag          = "{{ telegraf__conf__outputs__amqp__routing_tag }}"
  retention_policy     = "{{ telegraf__conf__outputs__amqp__retention_policy }}"
  database             = "{{ telegraf__conf__outputs__amqp__database }}"
  precision            = "s"
{% if telegraf__conf__outputs__amqp__ssl__enabled %}
  ssl_ca               = "{{ telegraf__conf__outputs__amqp__ssl__ssl_ca }}"
  ssl_cert             = "{{ telegraf__conf__outputs__amqp__ssl__ssl_cert }}"
  ssl_key              = "{{ telegraf__conf__outputs__amqp__ssl__ssl_key }}"
  insecure_skip_verify = {{ telegraf__conf__outputs__amqp__ssl__insecure_skip_verify|lower }}
{% endif %}
  data_format          = "{{ telegraf__conf__outputs__amqp__data_format }}"

{% endif %}
{% if telegraf__conf__outputs__cloudwatch__enabled %}
[[outputs.cloudwatch]]
  region     = '{{ telegraf__conf__outputs__cloudwatch__region }}'
{% if telegraf__conf__outputs__cloudwatch__access_key %}
  access_key = "{{ telegraf__conf__outputs__cloudwatch__access_key }}"
{% endif %}
{% if telegraf__conf__outputs__cloudwatch__secret_key %}
  secret_key = "{{ telegraf__conf__outputs__cloudwatch__secret_key }}"
{% endif %}
  namespace  = '{{ telegraf__conf__outputs__cloudwatch__namespace }}'

{% endif %}
{% if telegraf__conf__outputs__datadog__enabled %}
[[outputs.datadog]]
  apikey  = "{{ telegraf__conf__outputs__datadog__apikey }}"
  timeout = "{{ telegraf__conf__outputs__datadog__timeout }}"

{% endif %}
{% if telegraf__conf__outputs__file__enabled %}
[[outputs.file]]
  files       = [
{% for file in telegraf__conf__outputs__file__files %}
    "{{ file }}",
{% endfor %}
  ]
  data_format = "{{ telegraf__conf__outputs__file__data_format }}"

{% endif %}
{% if telegraf__conf__outputs__graphite__enabled %}
[[outputs.graphite]]
  servers  = [
{% for server in telegraf__conf__outputs__graphite__servers %}
    "{{ server }}",
{% endfor %}
  ]
  prefix   = "{{ telegraf__conf__outputs__graphite__prefix }}"
  template = "{{ telegraf__conf__outputs__graphite__template }}"
  timeout  = {{ telegraf__conf__outputs__graphite__timeout }}

{% endif %}
{% if telegraf__conf__outputs__instrumental__enabled %}
[[outputs.instrumental]]
  api_token = "{{ telegraf__conf__outputs__instrumental__api_token }}"
  prefix    = "{{ telegraf__conf__outputs__instrumental__prefix }}"
  template  = "{{ telegraf__conf__outputs__instrumental__template }}"
  timeout   = "{{ telegraf__conf__outputs__instrumental__timeout }}"
  debug     = {{ telegraf__conf__outputs__instrumental__debug|lower }}

{% endif %}
{% if telegraf__conf__outputs__kafka__enabled %}
[[outputs.kafka]]
  brokers              = [
{% for broker in telegraf__conf__outputs__kafka__brokers %}
    "{{ broker }}",
{% endfor %}
  ]
  topic                = "{{ telegraf__conf__outputs__kafka__topic }}"
  routing_tag          = "{{ telegraf__conf__outputs__kafka__routing_tag }}"
  compression_codec    = {{ telegraf__conf__outputs__kafka__compression_codec }}
  required_acks        = {{ telegraf__conf__outputs__kafka__required_acks }}
  max_retry            = {{ telegraf__conf__outputs__kafka__max_retry }}
{% if telegraf__conf__outputs__kafka__ssl__enabled %}
  ssl_ca               = "{{ telegraf__conf__outputs__kafka__ssl__ssl_ca }}"
  ssl_cert             = "{{ telegraf__conf__outputs__kafka__ssl__ssl_cert }}"
  ssl_key              = "{{ telegraf__conf__outputs__kafka__ssl__ssl_key }}"
  insecure_skip_verify = {{ telegraf__conf__outputs__kafka__ssl__insecure_skip_verify|lower }}
{% endif %}
  data_format          = "{{ telegraf__conf__outputs__kafka__data_format }}"

{% endif %}
{% if telegraf__conf__outputs__kinesis__enabled %}
[[outputs.kinesis]]
  region       = "{{ telegraf__conf__outputs__kinesis__region }}"
{% if telegraf__conf__outputs__kinesis__access_key %}
  access_key   = "{{ telegraf__conf__outputs__kinesis__access_key }}"
{% endif %}
{% if telegraf__conf__outputs__kinesis__secret_key %}
  secret_key   = "{{ telegraf__conf__outputs__kinesis__secret_key }}"
{% endif %}
  streamname   = "{{ telegraf__conf__outputs__kinesis__streamname }}"
  partitionkey = "{{ telegraf__conf__outputs__kinesis__partitionkey }}"
  format       = "{{ telegraf__conf__outputs__kinesis__format }}"
  debug        = {{ telegraf__conf__outputs__kinesis__debug|lower }}

{% endif %}
{% if telegraf__conf__outputs__librato__enabled %}
[[outputs.librato]]
  api_user   = "{{ telegraf__conf__outputs__librato__api_user }}"
  api_token  = "{{ telegraf__conf__outputs__librato__api_token }}"
  debug      = {{ telegraf__conf__outputs__librato__debug|lower }}
  source_tag = "{{ telegraf__conf__outputs__librato__source_tag }}"
  timeout    = "{{ telegraf__conf__outputs__librato__timeout }}"
  template   = "{{ telegraf__conf__outputs__librato__template }}"

{% endif %}
{% if telegraf__conf__outputs__mqtt__enabled %}
[[outputs.mqtt]]
  servers              = [
{% for server in telegraf__conf__outputs__mqtt__servers %}
    "{{ server }}",
{% endfor %}
  ]
  topic_prefix         = "{{ telegraf__conf__outputs__mqtt__topic_prefix }}"
{% if telegraf__conf__outputs__mqtt__username %}
  username             = "{{ telegraf__conf__outputs__mqtt__username }}"
{% endif %}
{% if telegraf__conf__outputs__mqtt__password %}
  password             = "{{ telegraf__conf__outputs__mqtt__password }}"
{% endif %}
{% if telegraf__conf__outputs__mqtt__ssl__enabled %}
  ssl_ca               = "{{ telegraf__conf__outputs__mqtt__ssl__ssl_ca }}"
  ssl_cert             = "{{ telegraf__conf__outputs__mqtt__ssl__ssl_cert }}"
  ssl_key              = "{{ telegraf__conf__outputs__mqtt__ssl__ssl_key }}"
  insecure_skip_verify = {{ telegraf__conf__outputs__mqtt__ssl__insecure_skip_verify|lower }}
{% endif %}
  data_format          = ""

{% endif %}
{% if telegraf__conf__outputs__nsq__enabled %}
[[outputs.nsq]]
  server      = "{{ telegraf__conf__outputs__nsq__server }}"
  topic       = "{{ telegraf__conf__outputs__nsq__topic }}"
  data_format = "{{ telegraf__conf__outputs__nsq__data_format }}"

{% endif %}
{% if telegraf__conf__outputs__opentsdb__enabled %}
[[outputs.opentsdb]]
  prefix = "{{ telegraf__conf__outputs__opentsdb__prefix }}"
  host   = "{{ telegraf__conf__outputs__opentsdb__host }}"
  port   = {{ telegraf__conf__outputs__opentsdb__port }}
  debug  = {{ telegraf__conf__outputs__opentsdb__debug|lower }}

{% endif %}
{% if telegraf__conf__outputs__prometheus_client__enabled %}
[[outputs.prometheus_client]]
  listen = "{{ telegraf__conf__outputs__prometheus_client__listen }}"

{% endif %}
{% if telegraf__conf__outputs__riemann__enabled %}
[[outputs.riemann]]
  url       = "{{ telegraf__conf__outputs__riemann__url }}"
  transport = "{{ telegraf__conf__outputs__riemann__transport }}"
  separator = "{{ telegraf__conf__outputs__riemann__separator }}"

{% endif %}
###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

{% if telegraf__conf__inputs__cpu__enabled %}
[[inputs.cpu]]
  percpu    = true
  totalcpu  = true
  fielddrop = [
{% for field in telegraf__conf__inputs__cpu__fielddrop %}
    "{{ field }}",
{% endfor %}
  ]

{% endif %}
{% if telegraf__conf__inputs__cpu__enabled %}
[[inputs.disk]]
{% if telegraf__conf__inputs__disk__mount_points %}
  mount_points = [
{% for mount_point in telegraf__conf__inputs__disk__mount_points %}
    "{{ mount_point }}",
{% endfor %}
  ]
{% endif %}
  ignore_fs = [
{% for ignore_fs in telegraf__conf__inputs__disk__ignore_fs %}
    "{{ ignore_fs }}",
{% endfor %}
  ]

{% endif %}
{% if telegraf__conf__inputs__diskio__enabled %}
[[inputs.diskio]]
{% if telegraf__conf__inputs__diskio__devices %}
  devices            = [
{% for device in telegraf__conf__inputs__diskio__devices %}
    "{{ device }}",
{% endfor %}
]
{% endif %}
  skip_serial_number = {{ telegraf__conf__inputs__diskio__skip_serial_number|lower }}

{% endif %}
{% if telegraf__conf__inputs__kernel__enabled %}
[[inputs.kernel]]

{% endif %}
{% if telegraf__conf__inputs__mem__enabled %}
[[inputs.mem]]

{% endif %}
{% if telegraf__conf__inputs__processes__enabled %}
[[inputs.processes]]

{% endif %}
{% if telegraf__conf__inputs__swap__enabled %}
[[inputs.swap]]

{% endif %}
{% if telegraf__conf__inputs__system__enabled %}
[[inputs.system]]

{% endif %}
{% if telegraf__conf__inputs__aerospike__enabled %}
[[inputs.aerospike]]
  servers = [
{% for server in telegraf__conf__inputs__aerospike__servers %}
    "{{ server }}",
{% endfor %}
]

{% endif %}
{% if telegraf__conf__inputs__apache__enabled %}
[[inputs.apache]]
  urls = [
{% for server in telegraf__conf__inputs__apache__urls %}
    "{{ server }}",
{% endfor %}
]

{% endif %}
{% if telegraf__conf__inputs__bcache__enabled %}
[[inputs.bcache]]
  bcachePath = "{{ telegraf__conf__inputs__bcache__bcachePath }}"
  bcacheDevs = [
{% for bcacheDev in telegraf__conf__inputs__bcache__bcacheDevs %}
  "{{ bcacheDev }}",
{% endfor %}
]

{% endif %}
{% if telegraf__conf__inputs__cassandra__enabled %}
[[inputs.cassandra]]
  context = "{{ telegraf__conf__inputs__cassandra__context }}"
  servers = [
{% for server in telegraf__conf__inputs__cassandra__servers %}
  "{{ server }}",
{% endfor %}
  ]
  metrics = [
{% for metric in telegraf__conf__inputs__cassandra__metrics %}
    "{{ metric }}",
{% endfor %}
  ]

{% endif %}
{% if telegraf__conf__inputs__ceph__enabled %}
[[inputs.ceph]]
  ceph_binary   = "{{ telegraf__conf__inputs__ceph__ceph_binary }}"
  socket_dir    = "{{ telegraf__conf__inputs__ceph__socket_dir }}"
  mon_prefix    = "{{ telegraf__conf__inputs__ceph__mon_prefix }}"
  osd_prefix    = "{{ telegraf__conf__inputs__ceph__osd_prefix }}"
  socket_suffix = "{{ telegraf__conf__inputs__ceph__socket_suffix }}"

{% endif %}
{% if telegraf__conf__inputs__cloudwatch__enabled %}
[[inputs.cloudwatch]]
  region     = '{{ telegraf__conf__inputs__cloudwatch__region }}'
{% if telegraf__conf__inputs__cloudwatch__access_key %}
  access_key = "{{ telegraf__conf__inputs__cloudwatch__access_key }}"
{% endif %}
{% if telegraf__conf__inputs__cloudwatch__secret_key %}
  secret_key = "{{ telegraf__conf__inputs__cloudwatch__secret_key }}"
{% endif %}
  period     = '{{ telegraf__conf__inputs__cloudwatch__period }}'
  delay      = '{{ telegraf__conf__inputs__cloudwatch__delay }}'
  interval   = '{{ telegraf__conf__inputs__cloudwatch__interval }}'
  namespace  = '{{ telegraf__conf__inputs__cloudwatch__namespace }}'
{% if telegraf__conf__inputs__cloudwatch__metrics__enabled %}
  [[inputs.cloudwatch.metrics]]
    names = [
{% for name in telegraf__conf__inputs__cloudwatch__metrics__names %}
    "{{ name }}",
{% endfor %}
    ]
{% if telegraf__conf__inputs__cloudwatch__metrics__dimensions__enabled %}
    [[inputs.cloudwatch.metrics.dimensions]]
      name  = '{{ telegraf__conf__inputs__cloudwatch__metrics__dimensions__name }}'
      value = '{{ telegraf__conf__inputs__cloudwatch__metrics__dimensions__value }}'
{% endif %}
{% endif %}

{% endif %}
{% if telegraf__conf__inputs__couchbase__enabled %}
[[inputs.couchbase]]
  servers = [
{% for server in telegraf__conf__inputs__couchbase__servers %}
    "{{ server }}",
{% endfor %}
  ]

{% endif %}
{% if telegraf__conf__inputs__couchdb__enabled %}
[[inputs.couchdb]]
  hosts = [
{% for host in telegraf__conf__inputs__couchdb__hosts %}
    "{{ host }}",
{% endfor %}
  ]

{% endif %}
{% if telegraf__conf__inputs__disque__enabled %}
[[inputs.disque]]
  servers = [
{% for server in telegraf__conf__inputs__disque__servers %}
    "{{ server }}",
{% endfor %}
  ]

{% endif %}
{% if telegraf__conf__inputs__dns_query__enabled %}
[[inputs.dns_query]]
  servers     = [
{% for server in telegraf__conf__inputs__dns_query__servers %}
    "{{ server }}",
{% endfor %}
  ]
  domains     = [
{% for domain in telegraf__conf__inputs__dns_query__domains %}
    "{{ domain }}",
{% endfor %}
  ]
  record_type = "{{ telegraf__conf__inputs__dns_query__record_type }}"
  port        = {{ telegraf__conf__inputs__dns_query__port }}
  timeout     = {{ telegraf__conf__inputs__dns_query__timeout }}

{% endif %}
{% if telegraf__conf__inputs__docker__enabled %}
[[inputs.docker]]
  endpoint        = "{{ telegraf__conf__inputs__docker__endpoint }}"
  container_names = [
{% for container_name in telegraf__conf__inputs__docker__container_name %}
    "{{ container_name }}",
{% endfor %}
  ]
  timeout         = "{{ telegraf__conf__inputs__docker__timepoint }}"

{% endif %}
{% if telegraf__conf__inputs__dovecot__enabled %}
[[inputs.dovecot]]
  servers     = [
{% for server in telegraf__conf__inputs__dovecot__servers %}
    "{{ server }}",
{% endfor %}
  ]
  type    = "{{ telegraf__conf__inputs__dovecot__type }}"
  filters     = [
{% for filter in telegraf__conf__inputs__dovecot__filters %}
    "{{ filter }}",
{% endfor %}
  ]

{% endif %}
{% if telegraf__conf__inputs__elasticsearch__enabled %}
[[inputs.elasticsearch]]
  servers     = [
{% for server in telegraf__conf__inputs__elasticsearch__servers %}
    "{{ server }}",
{% endfor %}
  ]
  local          = {{ telegraf__conf__inputs__elasticsearch__local|lower }}
  cluster_health = {{ telegraf__conf__inputs__elasticsearch__cluster_health|lower }}

{% endif %}
{% if telegraf__conf__inputs__exec__enabled %}
[[inputs.exec]]
  commands    = [
{% for command in telegraf__conf__inputs__exec__commands %}
    "{{ command }}",
{% endfor %}
  ]
  timeout     = "{{ telegraf__conf__inputs__exec__timeout }}"
  name_suffix = "{{ telegraf__conf__inputs__exec__name_suffix }}"
  data_format = "{{ telegraf__conf__inputs__exec__data_format }}"

{% endif %}
{% if telegraf__conf__inputs__filestat__enabled %}
[[inputs.filestat]]
  files = [
{% for file in telegraf__conf__inputs__filestat__files %}
    "{{ file }}",
{% endfor %}
  ]
  md5   = {{ telegraf__conf__inputs__filestat__md5|lower }}

{% endif %}
{% if telegraf__conf__inputs__haproxy__enabled %}
[[inputs.haproxy]]
  servers = [
{% for server in telegraf__conf__inputs__haproxy__servers %}
    "{{ server }}",
{% endfor %}
  ]

{% endif %}
{% if telegraf__conf__inputs__http_response__enabled %}
[[inputs.http_response]]
  address          = "{{ telegraf__conf__inputs__http_response__address }}"
  response_timeout = "{{ telegraf__conf__inputs__http_response__response_timeout }}"
  method           = "{{ telegraf__conf__inputs__http_response__method }}"
  follow_redirects = {{ telegraf__conf__inputs__http_response__follow_redirects|lower }}
{% if telegraf__conf__inputs__http_response__headers__enabled %}
  [inputs.http_response.headers]
    Host           = "{{ telegraf__conf__inputs__http_response__headers__host }}"
{% if telegraf__conf__inputs__http_response__headers__body %}
    body           = '''
    {{ telegraf__conf__inputs__http_response__headers__body }}
    '''
{% endif %}
{% endif %}

{% endif %}
{% for httpjson in telegraf__conf__inputs__httpjson %}
{% if httpjson.enabled %}
[[inputs.httpjson]]
  name           = "{{ httpjson.name }}"
  servers        = [
{% for server in httpjson.servers %}
    "{{ server }}",
{% endfor %}
  ]
  method         = "{{ httpjson.method }}"
{% if httpjson.tag_keys|default([]) %}
  tag_keys       = [
{% for tag_key in httpjson.tag_keys %}
    "{{ tag_key }}",
{% endfor %}
  ]
{% endif %}
{% if httpjson.parameters|default(false) %}
  [inputs.httpjson.parameters]
{% for parameter_name, parameter_value in httpjson.parameters.iteritems() %}
    {{ parameter_name }} = "{{ parameter_value }}"
{% endfor %}
  ]
{% endif %}
{% if httpjson.headers|default(false) %}
  [inputs.httpjson.headers]
{% for header_name, header_value in httpjson.headers.iteritems() %}
    {{ header_name }} = "{{ header_value }}"
{% endfor %}
  ]
{% endif %}
{% if httpjson.ssl__enabled|default(false) %}
  ssl_ca               = "{{ httpjson.ssl__ssl_ca }}"
  ssl_cert             = "{{ httpjson.ssl__ssl_cert }}"
  ssl_key              = "{{ httpjson.ssl__ssl_key }}"
  insecure_skip_verify = {{ httpjson.ssl__insecure_skip_verify|lower }}
{% endif %}

{% endif %}
{% endfor %}
# [[inputs.influxdb]]
#   urls = [
#     "http://localhost:8086/debug/vars"
#   ]


# [[inputs.ipmi_sensor]]
#   servers = ["USERID:PASSW0RD@lan(192.168.1.1)"]


# [[inputs.jolokia]]
#   context = "/jolokia"
#   # mode = "proxy"
#   # [inputs.jolokia.proxy]
#   #   host = "127.0.0.1"
#   #   port = "8080"
#   [[inputs.jolokia.servers]]
#     name = "as-server-01"
#     host = "127.0.0.1"
#     port = "8080"
#     # username = "myuser"
#     # password = "mypassword"
#   [[inputs.jolokia.metrics]]
#     name = "heap_memory_usage"
#     mbean  = "java.lang:type=Memory"
#     attribute = "HeapMemoryUsage"
#   [[inputs.jolokia.metrics]]
#     name = "thread_count"
#     mbean  = "java.lang:type=Threading"
#     attribute = "TotalStartedThreadCount,ThreadCount,DaemonThreadCount,PeakThreadCount"
#   [[inputs.jolokia.metrics]]
#     name = "class_count"
#     mbean  = "java.lang:type=ClassLoading"
#     attribute = "LoadedClassCount,UnloadedClassCount,TotalLoadedClassCount"

# [[inputs.leofs]]
#   servers = ["127.0.0.1:4021"]

# [[inputs.lustre2]]
#   # ost_procfiles = [
#   #   "/proc/fs/lustre/obdfilter/*/stats",
#   #   "/proc/fs/lustre/osd-ldiskfs/*/stats",
#   #   "/proc/fs/lustre/obdfilter/*/job_stats",
#   # ]
#   # mds_procfiles = [
#   #   "/proc/fs/lustre/mdt/*/md_stats",
#   #   "/proc/fs/lustre/mdt/*/job_stats",
#   # ]

# [[inputs.mailchimp]]
#   api_key = "" # required
#   days_old = 0
#   # campaign_id = ""

# [[inputs.memcached]]
#   servers = ["localhost:11211"]
#   # unix_sockets = ["/var/run/memcached.sock"]

# [[inputs.mesos]]
#   timeout = 100
#   masters = ["localhost:5050"]
#   master_collections = [
#     "resources",
#     "master",
#     "system",
#     "slaves",
#     "frameworks",
#     "messages",
#     "evqueue",
#     "registrar",
#   ]

# [[inputs.mongodb]]
#   servers = ["127.0.0.1:27017"]

# [[inputs.mysql]]
#   servers = ["tcp(127.0.0.1:3306)/"]
#   perf_events_statements_digest_text_limit  = 120
#   perf_events_statements_limit              = 250
#   perf_events_statements_time_limit         = 86400
#   table_schema_databases                    = []
#   gather_table_schema                       = false
#   gather_process_list                       = true
#   gather_info_schema_auto_inc               = true
#   gather_slave_status                       = true
#   gather_binary_logs                        = false
#   gather_table_io_waits                     = false
#   gather_table_lock_waits                   = false
#   gather_index_io_waits                     = false
#   gather_event_waits                        = false
#   gather_file_events_stats                  = false
#   gather_perf_events_statements             = false
#   interval_slow                   = "30m"

# [[inputs.net]]
#   # interfaces = ["eth0"]

# [[inputs.net_response]]
#   protocol = "tcp"
#   address = "github.com:80"
#   timeout = "1s"
#   # send = "ssh"
#   # expect = "ssh"
#   read_timeout = "1s"

# [[inputs.netstat]]

# [[inputs.nginx]]
#   urls = ["http://localhost/status"]

# [[inputs.nsq]]
#   endpoints = ["http://localhost:4151"]

# [[inputs.nstat]]
#   proc_net_netstat = ""
#   proc_net_snmp    = ""
#   proc_net_snmp6   = ""
#   dump_zeros       = true

# [[inputs.ntpq]]
#   dns_lookup = true

# [[inputs.passenger]]
#   command = "passenger-status -v --show=xml"

# [[inputs.phpfpm]]
#   urls = ["http://localhost/status"]

# [[inputs.ping]]
#   urls = ["www.google.com"] # required
#   count = 1 # required
#   ping_interval = 0.0
#   timeout = 1.0
#   interface = ""

# [[inputs.postgresql]]
#   address = "host=localhost user=postgres sslmode=disable"
#   # databases = ["app_production", "testing"]

# [[inputs.postgresql_extensible]]
#   address = "host=localhost user=postgres sslmode=disable"
#   # databases = ["app_production", "testing"]
#   # outputaddress = "db01"
#   [[inputs.postgresql_extensible.query]]
#     sqlquery="SELECT * FROM pg_stat_database"
#     version="901"
#     withdbname=false
#     tagvalue=""
#     measurement=""
#   [[inputs.postgresql_extensible.query]]
#     sqlquery="SELECT * FROM pg_stat_bgwriter"
#     version=901
#     withdbname=false
#     tagvalue="postgresql.stats"

# [[inputs.powerdns]]
#   unix_sockets = ["/var/run/pdns.controlsocket"]

# [[inputs.procstat]]
#   pid_file = "/var/run/nginx.pid"
#   # exe = "nginx"
#   # pattern = "nginx"
#   # user = "nginx"
#   # process_name = "bar"
#   prefix = ""
#   fielddrop = ["cpu_time_*"]

# [[inputs.prometheus]]
#   urls = ["http://localhost:9100/metrics"]
#   # insecure_skip_verify = false
#   # bearer_token = /path/to/bearer/token

# [[inputs.puppetagent]]
#   location = "/var/lib/puppet/state/last_run_summary.yaml"

# [[inputs.rabbitmq]]
#   url = "http://localhost:15672" # required
#   # name = "rmq-server-1" # optional tag
#   # username = "guest"
#   # password = "guest"
#   # nodes = ["rabbit@node1", "rabbit@node2"]

# [[inputs.raindrops]]
#   urls = ["http://localhost:8080/_raindrops"]

# [[inputs.redis]]
#   servers = ["tcp://localhost:6379"]

# [[inputs.rethinkdb]]
#   servers = ["127.0.0.1:28015"]

# [[inputs.riak]]
#   servers = ["http://localhost:8098"]

# [[inputs.snmp]]
#   snmptranslate_file = "/tmp/oids.txt"
#   [[inputs.snmp.host]]
#     address = "192.168.2.2:161"
#     community = "public" # default public
#     version = 2 # default 2
#     timeout = 2.0 # default 2.0
#     retries = 2 # default 2
#     collect = ["mybulk", "sysservices", "sysdescr"]
#     get_oids = []
#   [[inputs.snmp.host]]
#     address = "192.168.2.3:161"
#     community = "public"
#     version = 2
#     timeout = 2.0
#     retries = 2
#     collect = ["mybulk"]
#     get_oids = [
#         "ifNumber",
#         ".1.3.6.1.2.1.1.3.0",
#     ]
#   [[inputs.snmp.get]]
#     name = "ifnumber"
#     oid = "ifNumber"
#   [[inputs.snmp.get]]
#     name = "interface_speed"
#     oid = "ifSpeed"
#     instance = "0"
#   [[inputs.snmp.get]]
#     name = "sysuptime"
#     oid = ".1.3.6.1.2.1.1.3.0"
#     unit = "second"
#   [[inputs.snmp.bulk]]
#     name = "mybulk"
#     max_repetition = 127
#     oid = ".1.3.6.1.2.1.1"
#   [[inputs.snmp.bulk]]
#     name = "ifoutoctets"
#     max_repetition = 127
#     oid = "ifOutOctets"
#   [[inputs.snmp.host]]
#     address = "192.168.2.13:161"
#     #address = "127.0.0.1:161"
#     community = "public"
#     version = 2
#     timeout = 2.0
#     retries = 2
#     #collect = ["mybulk", "sysservices", "sysdescr", "systype"]
#     collect = ["sysuptime" ]
#     [[inputs.snmp.host.table]]
#       name = "iftable3"
#       include_instances = ["enp5s0", "eth1"]
#   [[inputs.snmp.table]]
#     name = "iftable1"
#     oid = ".1.3.6.1.2.1.31.1.1.1"
#   [[inputs.snmp.table]]
#     name = "iftable2"
#     oid = ".1.3.6.1.2.1.31.1.1.1"
#     sub_tables = [".1.3.6.1.2.1.2.2.1.13"]
#   [[inputs.snmp.table]]
#     name = "iftable3"
#     oid = ".1.3.6.1.2.1.31.1.1.1"
#     mapping_table = ".1.3.6.1.2.1.31.1.1.1.1"
#   [[inputs.snmp.table]]
#     name = "iftable4"
#     oid = ".1.3.6.1.2.1.31.1.1.1"
#     mapping_table = ".1.3.6.1.2.1.31.1.1.1.1"
#     sub_tables=[".1.3.6.1.2.1.2.2.1.13", "bytes_recv", "bytes_send"]

# [[inputs.sqlserver]]
#   # servers = [
#   #  "Server=192.168.1.10;Port=1433;User Id=<user>;Password=<pw>;app name=telegraf;log=1;",
#   # ]

# [[inputs.trig]]
#   amplitude = 10.0

# [[inputs.twemproxy]]
#   addr = "localhost:22222"
#   pools = ["redis_pool", "mc_pool"]

# [[inputs.varnish]]
#   binary = "/usr/bin/varnishstat"
#   stats = ["MAIN.cache_hit", "MAIN.cache_miss", "MAIN.uptime"]

# [[inputs.zfs]]
#   kstatPath = "/proc/spl/kstat/zfs"
#   kstatMetrics = ["arcstats", "zfetchstats", "vdev_cache_stats"]
#   poolMetrics = false

# [[inputs.zookeeper]]
#   servers = [":2181"]

###############################################################################
#                            SERVICE INPUT PLUGINS                            #
###############################################################################

# [[inputs.github_webhooks]]
#   service_address = ":1618"

# [[inputs.kafka_consumer]]
#   topics = ["telegraf"]
#   zookeeper_peers = ["localhost:2181"]
#   zookeeper_chroot = "/"
#   consumer_group = "telegraf_metrics_consumers"
#   offset = "oldest"
#   data_format = "influx"

# [[inputs.mqtt_consumer]]
#   servers = ["localhost:1883"]
#   qos = 0
#   topics = [
#     "telegraf/host01/cpu",
#     "telegraf/+/mem",
#     "sensors/#",
#   ]
#   persistent_session = false
#   client_id = ""
#   # username = "telegraf"
#   # password = "metricsmetricsmetricsmetrics"
#   # ssl_ca = "/etc/telegraf/ca.pem"
#   # ssl_cert = "/etc/telegraf/cert.pem"
#   # ssl_key = "/etc/telegraf/key.pem"
#   # insecure_skip_verify = false
#   data_format = "influx"

# [[inputs.nats_consumer]]
#   servers = ["nats://localhost:4222"]
#   secure = false
#   subjects = ["telegraf"]
#   queue_group = "telegraf_consumers"
#   data_format = "influx"

# [[inputs.statsd]]
#   service_address = ":8125"
#   delete_gauges = false
#   delete_counters = false
#   delete_sets = false
#   delete_timings = true
#   percentiles = [90]
#   metric_separator = "_"
#   parse_data_dog_tags = false
#   # templates = [
#   #     "cpu.* measurement*"
#   # ]
#   allowed_pending_messages = 10000
#   percentile_limit = 1000

# [[inputs.tail]]
#   files = ["/var/mymetrics.out"]
#   from_beginning = false
#   data_format = "influx"

# [[inputs.tcp_listener]]
#   service_address = ":8094"
#   allowed_pending_messages = 10000
#   max_tcp_connections = 250
#   data_format = "influx"

# [[inputs.udp_listener]]
#   service_address = ":8092"
#   allowed_pending_messages = 10000
#   data_format = "influx"
